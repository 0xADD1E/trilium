#!/usr/bin/env node

process.on('unhandledRejection', error => {
    // this makes sure that stacktrace of failed promise is printed out
    console.log(error);

    // but also try to log it into file
    require('./services/log').info(error);
});

const { app, sessionParser } = require('./app');
const debug = require('debug')('node:server');
const fs = require('fs');
const http = require('http');
const https = require('https');
const config = require('./services/config');
const log = require('./services/log');
const appInfo = require('./services/app_info');
const messagingService = require('./services/messaging');
const utils = require('./services/utils');
const sql = require('./services/sql');

const port = normalizePort(config['Network']['port'] || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
let httpServer;

if (config['Network']['https']) {
    const options = {
        key: fs.readFileSync(config['Network']['keyPath']),
        cert: fs.readFileSync(config['Network']['certPath'])
    };

    httpServer = https.createServer(options, app);

    log.info("App HTTPS server starting up at port " + port);
}
else {
    httpServer = http.createServer(app);

    log.info("App HTTP server starting up at port " + port);
}

log.info(JSON.stringify(appInfo, null, 2));

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.keepAliveTimeout = 120000 * 5;
httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

sql.dbReady.then(() => messagingService.init(httpServer, sessionParser));

if (utils.isElectron()) {
    const electronRouting = require('./routes/electron');
    electronRouting(app);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
        break;

        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
        break;

        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = httpServer.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;

    debug('Listening on ' + bind);
}